@page "/fetchpeople"
@using Microsoft.AspNetCore.Components.QuickGrid.QuickGridCollection
@using SimpeQuickGrid.Data
@using Simple.OData.Client;
@using System.Linq.Expressions;
@inject PersonService PersonService
@inject PeopleDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>QuickGridC Demonstration</PageTitle>

<h1>QuickGridC Demonstration</h1>

<p>This is a demonstration of using the parameters of the QuickGridC component and its subcomponent PropertyColumnC</p>

@if (isEgualEF != null && !(bool)isEgualEF)
{
    <div class="alert alert-danger" role="alert">
        Not equql of EF
    </div>
}
@if (message != null)
{
    <div class="alert alert-danger" role="alert">
        <span> Erreur:</span>
        <p>@message</p>
    </div>
}
@if (messageEF != null)
{
    <div class="alert alert-danger" role="alert">
        <span>Erreur EF:</span>
        <p>@messageEF</p>
    </div>
}
@if (messageOdata != null)
{
    <div class="alert alert-danger" role="alert">
        <span>Erreur Odata:</span>
        <p>@messageOdata</p>
    </div>
}
@if (isEgualOdata != null && !(bool)isEgualOdata)
{
    <div class="alert alert-danger" role="alert">
        Not equql of Odata
    </div>
}
<PeopleGrid People="peopleGrid" FilterSortChanged="FilterSortChanged" GridPagingState="gridPagingState" />

@code {
    private List<Person>? peopleGrid;
    private IQueryable<Person> people = default!;
    private IQueryable<Person> peopleEF = default!;
    private IQueryable<Person> queryPeopleGrid = default!;
    private IQueryable<Person> queryEFPeopleGrid = default!;
    private GridFilteringAndSorting<Person> filteringAndSorting = default!;
    private GridPagingState gridPagingState = new(5);
    private bool? isEgualEF = null;
    private bool? isEgualOdata = null;
    private string? message;
    private string? messageEF;
    private string? messageOdata;

    protected override async Task OnInitializedAsync()
    {
        people = (await PersonService.GetPeopleAsync()).AsQueryable();
        peopleEF = DbContext.People;

        queryPeopleGrid = people;
        queryEFPeopleGrid = peopleEF;

        gridPagingState.PageChanged += HandlePageChange;
        gridPagingState.CurrentPage = 1;
    }

    private void FilterSortChanged(GridFilteringAndSorting<Person> filteringAndSorting)
    {
        // utilisation de Linq
        queryPeopleGrid = filteringAndSorting.ApplyFilterAndSortExpressionsForLinq(people);

        // utiliation de Entity Framework Core
        queryEFPeopleGrid = filteringAndSorting.ApplyFilterAndSortExpressions(peopleEF);
       
        // Utilisation de Simple.Client.OData
        this.filteringAndSorting = filteringAndSorting;

        gridPagingState.CurrentPage = 1;
    }

    private async void HandlePageChange(object? sender, GridPageChangedEventArgs e)
    {
        // utilisation de Linq
        try
        {
            message = null;
            e.TotalItems = queryPeopleGrid.Count();
            var queryable = queryPeopleGrid;
            if (e.Skip > 0)
                queryable = queryable.Skip(e.Skip);
            queryable = queryable.Take(e.ItemsPerPage);
            peopleGrid = queryable.ToList();
        }
        catch (Exception m)
        {
            message = m.Message;
        }

        //utiliation de Entity Framework Core
        List<Person>? listEf = new();
        int countEF = 0;
        try
        {
            messageEF = null;
            countEF = queryEFPeopleGrid.Count();
            var queryableEF = queryEFPeopleGrid;
            if (e.Skip > 0)
                queryableEF = queryableEF.Skip(e.Skip);
            queryableEF = queryableEF.Take(e.ItemsPerPage);
            listEf = queryableEF.ToList();
        }
        catch (Exception m)
        {
            messageEF = m.Message;
        }

        // Utilisation de Simple.Client.OData
        List<Person>? ListOdata = new();
        int countOdata = 0;
        try
        {
            messageOdata = null;
            (ListOdata, countOdata) = await GetListOdata(e);
        }
        catch (Exception m)
        {
            messageOdata = m.Message;
        }

        ComparList(peopleGrid??new(), e.TotalItems, listEf, countEF, ListOdata, countOdata);
        StateHasChanged();
    }

    private async Task<(List<Person>, int)> GetListOdata(GridPageChangedEventArgs e)
    {
        var filteringAndSorting = new GridFilteringAndSorting<Person>();
        filteringAndSorting = (GridFilteringAndSorting<Person>)this.filteringAndSorting;
        var _ = NavigationManager;
        
        var client = new ODataClient($"{NavigationManager.BaseUri}odata");
        var queryableOdata = client.For<Person>();
        if (filteringAndSorting.HasFilterExpressions())
            queryableOdata.Filter(filteringAndSorting.CombineFilterExpressions()!);
        if (filteringAndSorting.HasSortExpressions())
        {
            foreach (var value in filteringAndSorting.SortExpressions!)
            {
                (var sort, var exp) = value;
                if (sort == SortedLinq.OrderBy)
                    queryableOdata.OrderBy(exp!);
                if (sort == SortedLinq.OrderByDescending)
                    queryableOdata.OrderByDescending(exp!);
                if (sort == SortedLinq.ThenBy)
                    queryableOdata.ThenBy(exp!);
                if (sort == SortedLinq.ThenByDescending)
                    queryableOdata.ThenByDescending(exp!);
            }
        }
        if (e.Skip > 0)
            queryableOdata.Skip(e.Skip);
        queryableOdata.Top(e.ItemsPerPage);

        var annotations = new ODataFeedAnnotations();        
        var items = await queryableOdata.FindEntriesAsync(annotations);
        var c = (int)(annotations.Count??0);
        return (items.ToList<Person>(), c);
    }
    private void ComparList(IEnumerable<Person> list1, int count1, IEnumerable<Person> list2, int count2, IEnumerable<Person> list3, int count3)
    {
        isEgualEF = list1.SequenceEqual(list2, new PersonComparer()) && count1 == count2;
        isEgualOdata = list1.SequenceEqual(list3, new PersonComparer()) && count1 == count3;
    }
}
