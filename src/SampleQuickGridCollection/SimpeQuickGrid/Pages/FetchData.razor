@page "/fetchdata"
@using Microsoft.AspNetCore.Components.QuickGrid.QuickGridCollection
@using Microsoft.AspNetCore.Components.QuickGrid.QuickGridCollection.Columns
@using SimpeQuickGrid.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGridC TGridItem="WeatherForecast" Items="@forecasts" FilterSortChanged="FilterSortChanged">
        <PropertyColumnC Property="@(e => e.Date)" />
        <PropertyColumnC Property="@(e => e.TemperatureC)" Title="Temp. (C)" HasAdvancedFilterOptions="true" />
        <PropertyColumnC Property="@(e => e.TemperatureF)" Title="Temp. (F)" />
        <PropertyColumnC Property="@(e => e.Summary)" />
    </QuickGridC>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[] Originalforecasts = default!;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
        Originalforecasts = forecasts.ToArray();
    }
    private void FilterSortChanged(GridFilteringAndSorting<WeatherForecast> filteringAndSorting)
    {        
        var queryable = Originalforecasts.AsQueryable();
        
        var q = filteringAndSorting.ApplyFilterAndSortExpressions(queryable);
        if (q != null)
            queryable = q;
        forecasts = queryable.ToArray();
    }
}
