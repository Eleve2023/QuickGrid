@using Microsoft.AspNetCore.Components.QuickGrid.QuickGridCollection.Infrastructure;
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.Components.Web

@namespace Microsoft.AspNetCore.Components.QuickGrid.QuickGridCollection
@typeparam TGridItem

<CascadingValue TValue="InternalGridContext<TGridItem>" Value="_internalGridContext" IsFixed=true>
    @{
        StartCollectingColumns();
    }
    @ChildContent
    <Defer>
        @{
            FinishCollectingColumns();
        }
        @*<ColumnsCollectedNotifier TGridItem="TGridItem" />*@
        <div class="@ClassAndStyle[ClassHtml.Grid_div]" style="@ClassAndStyle[StyleCss.Grid_div]">
            <table class="@ClassAndStyle[ClassHtml.Grid_div_table]" style="@ClassAndStyle[StyleCss.Grid_div_table]">
                <thead class="@ClassAndStyle[ClassHtml.Grid_div_table_thead]" style="@ClassAndStyle[StyleCss.Grid_div_table_thead]">
                    @_ColumnHeaders
                </thead>
                <tbody class="@ClassAndStyle[ClassHtml.Grid_div_table_thead]" style="@ClassAndStyle[StyleCss.Grid_div_table_thead]">
                    @_CellText
                </tbody>
            </table>
        </div>
    </Defer>

</CascadingValue>

@code {
    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        <tr class="@ClassAndStyle[ClassHtml.Grid_div_table_thead_tr]" style="@ClassAndStyle[StyleCss.Grid_div_table_thead_tr]">
            @foreach (var column in _columns)
            {
                <th class="@ClassAndStyle[ClassHtml.Grid_div_table_thead_tr_th]"
                    style="@ClassAndStyle[StyleCss.Grid_div_table_thead_tr_th]"
                    aria-sort="@AriaSortValue(column)">
                    <i class="@ClassAndStyle[ClassHtml.Grid_div_table_thead_tr_th_i]" style="@ClassAndStyle[StyleCss.Grid_div_table_thead_tr_th_i]">
                        <i class="@( GetSortClass(column))" style="@( GetSortStyle(column))" @onclick="@( () => ApplySort(column))"></i>
                    </i>
                    @column.HeaderContent
                </th>
            }
        </tr>
    }
    private void RenderCellText(RenderTreeBuilder __builder)
    {
        var initialRowIndex = 2; // aria-rowindex is 1-based, plus the first row is the header
        var rowIndex = initialRowIndex;
        foreach (var item in _currentItems)
        {
            RenderRow(__builder, item, rowIndex++);
        }
    }
    private void RenderRow(RenderTreeBuilder __builder, TGridItem item, int rowIndex)
    {
        <tr class="@ClassAndStyle[ClassHtml.Grid_div_table_tbody_tr]"
            style="@ClassAndStyle[StyleCss.Grid_div_table_tbody_tr]"
            aria-rowindex="@rowIndex"
        @onclick="(() =>  HandleRowSelection(item))">
            @foreach (var column in _columns)
            {
                <td class="@ClassAndStyle[ClassHtml.Grid_div_table_tbody_tr_td]" style="@ClassAndStyle[StyleCss.Grid_div_table_tbody_tr_td]">
                    @{
                        column.CellContent(__builder, item);
                    }
                </td>
            }
        </tr>
    }
}
