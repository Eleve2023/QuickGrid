@using Components.QuickGrid
@using System.Reflection;
@using System.Linq.Expressions;
@using Shared;
@inherits TestContext

@code {
    private readonly ICollection<MyAllType> _myAllTypes;
    private readonly ICollection<MyExpModele1> _myExps1;
    public MenuAdvancedFilterTest()
    {
        _myAllTypes = MyService.GetMyAllTypes();
        _myExps1 = MyService.MyExpModele1s;
    }

    [Fact]
    public void MenuAdvancedFilterTypeTest()
    {
        var cut = GetCutQuickeGrirdCAllType()?? throw new Exception();

        var table = GetHtmlTable(cut);
        for (int i = 0; i < GetHtmlTableCells(table!).Length; i++)
        {            
            var iconeOption = GetTableHeaderCell(cut, "i", i, "icon-option")!;

            var input = GetTableHeaderCell(cut, "input", i, "input-value");
            var rows = GetHtmlTableDataCells(cut, i);

            var buttons = GetTableHeaderCellButtons(cut, i);

            var btnOk = GetTableHeaderCellButton(buttons, "ok");

            var btnRest = GetTableHeaderCellButton(buttons, "reset");

            // Act
            // avec les valeur not null
            iconeOption.Click();
            input?.Change<string>(rows[0].TextContent);
            btnOk.Click();
            iconeOption.Click();
            btnRest.Click();
            //avec les valeur null
            iconeOption.Click();
            input = GetTableHeaderCell(cut, "input", i, "input-value");
            input?.Change<string>(rows[1].TextContent);
            btnOk.Click();
            iconeOption.Click();
            btnRest.Click();
            //sant touche input
            iconeOption.Click();
            btnOk.Click();
            iconeOption.Click();
            btnRest.Click();
        }

    }

    [Fact]
    public void AjoutFiltreTest()
    {
        var gridQuery = new GridQuery<MyExpModele1>();
        Action<GridQuery<MyExpModele1>> act = e => gridQuery = e; 
        var cut = Render(
        @<QuickGridC TGridItem="MyExpModele1" Items="_myExps1" FilterSortChanged="act">
        <PropertyColumnC Property="e => e.String1" HasAdvancedFilterOptions = "true" />
        <PropertyColumnC Property="e => e.String2" HasAdvancedFilterOptions = "true" />
        <PropertyColumnC Property="e => e.Int1" HasAdvancedFilterOptions = "true" />
        <PropertyColumnC Property="e => e.Bool1" HasAdvancedFilterOptions = "true" />
        <PropertyColumnC Property="e => e.Enum1" HasAdvancedFilterOptions = "true" />
        </QuickGridC>
    );
        var table = GetHtmlTable(cut);
        var iconeOption1 = GetTableHeaderCell(cut, "i", 0, "icon-option")!;
        var input1 = GetTableHeaderCell(cut, "input", 0, "input-value")!;
        //var rows = GetHtmlTableDataCells(cut, i);
        var buttons1 = GetTableHeaderCellButtons(cut, 0);
        var btnOk1 = GetTableHeaderCellButton(buttons1, "ok");
        var btnRest1 = GetTableHeaderCellButton(buttons1, "reset");
        iconeOption1.Click();
        input1.Change<string>("A");
        btnOk1.Click();
        Assert.Equal("x.String1.Contains(\"A\")", gridQuery.FilterExpressions[0].Body.ToString());
        iconeOption1.Click();
        btnRest1.Click();
        Assert.Empty(gridQuery.FilterExpressions);
        
        input1 = GetTableHeaderCell(cut, "input", 0, "input-value")!;
        var btnAdd = GetTableHeaderCellButton(buttons1, "add");
        iconeOption1.Click();
        input1.Change<string>("A");
        btnOk1.Click();

    }

    private AngleSharp.Html.Dom.IHtmlTableElement? GetHtmlTable(IRenderedFragment cut, int indexNode = 1)
    {
        return cut!.Nodes[indexNode].FirstChild as AngleSharp.Html.Dom.IHtmlTableElement;
    }
    private AngleSharp.Dom.IHtmlCollection<AngleSharp.Html.Dom.IHtmlTableCellElement> GetHtmlTableCells(AngleSharp.Html.Dom.IHtmlTableElement table, int rowIndex = 0)
    {
        return table!.Rows[rowIndex].Cells;
    }
    private AngleSharp.Html.Dom.IHtmlTableDataCellElement[] GetHtmlTableDataCells(IRenderedFragment cut, int cellIndex)
    {
        return cut.FindAll("td").Where(e => { if (e is AngleSharp.Html.Dom.IHtmlTableDataCellElement c) { if (c.Index == cellIndex) { return true; } } return false; }).Cast<AngleSharp.Html.Dom.IHtmlTableDataCellElement>().ToArray();
    }
    private AngleSharp.Dom.IElement? GetTableHeaderCell(IRenderedFragment cut, string find, int cellIndex, string id)
    {
        return cut.FindAll(find, true).Where(e => { var el = e; while (el is not AngleSharp.Html.Dom.IHtmlBodyElement) { if (el is AngleSharp.Html.Dom.IHtmlTableHeaderCellElement hc && hc.Index == cellIndex && e.Id == id) { return true; } el = el!.ParentElement; } return false; }).FirstOrDefault();
    }
    private IEnumerable<AngleSharp.Html.Dom.IHtmlButtonElement> GetTableHeaderCellButtons(IRenderedFragment cut, int cellIndex)
    {
        return cut.FindAll("button").Where(e => { var el = e; while (el is not AngleSharp.Html.Dom.IHtmlBodyElement) { if (el is AngleSharp.Html.Dom.IHtmlTableHeaderCellElement hc && hc.Index == cellIndex) { return true; } el = el!.ParentElement; } return false; }).Cast<AngleSharp.Html.Dom.IHtmlButtonElement>();
    }

    private AngleSharp.Html.Dom.IHtmlButtonElement GetTableHeaderCellButton(IEnumerable<AngleSharp.Html.Dom.IHtmlButtonElement> buttons, string name)
    {
        return buttons.Where(e => e.Name == name).First();
    }

    private PropertyInfo[] GetPropertyInfos()
    {
        return typeof(MyAllType).GetProperties();
    }

    private object? GetExpression(PropertyInfo propertyInfo)
    {
        var objectHandle = Activator.CreateInstance("QuickGridCTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n",
    $"QuickGridCTests.HelperExpressionOfMyAllType`1[[{propertyInfo.PropertyType.AssemblyQualifiedName}]]"
    );
        var helper = objectHandle!.Unwrap()!;
        var methode = helper.GetType().GetMethods().Where(e => e.Name == "GetExpression").First();
        return methode.Invoke(helper, new object[] { propertyInfo })!;
    }

    private IRenderedFragment? GetCutQuickeGrirdCAllType()
    {
        return Render(
    @<QuickGridC TGridItem="MyAllType" Items="_myAllTypes">
        @foreach (var propertyInfo in GetPropertyInfos())
        {
            var expression = GetExpression(propertyInfo);
            if (true)
            {
                if (expression is Expression<Func<MyAllType, String>> t1)
                {
                    <PropertyColumnC Property="t1" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Guid>> t3)
                {
                    <PropertyColumnC Property="t3" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Guid?>> t4)
                {
                    <PropertyColumnC Property="t4" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, EnumTest>> t5)
                {
                    <PropertyColumnC Property="t5" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, EnumTest?>> t6)
                {
                    <PropertyColumnC Property="t6" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Boolean>> t7)
                {
                    <PropertyColumnC Property="t7" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Boolean?>> t8)
                {
                    <PropertyColumnC Property="t8" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Byte>> t9)
                {
                    <PropertyColumnC Property="t9" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Byte?>> t10)
                {
                    <PropertyColumnC Property="t10" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, SByte>> t11)
                {
                    <PropertyColumnC Property="t11" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, SByte?>> t12)
                {
                    <PropertyColumnC Property="t12" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Char>> t13)
                {
                    <PropertyColumnC Property="t13" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Char?>> t14)
                {
                    <PropertyColumnC Property="t14" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Decimal>> t15)
                {
                    <PropertyColumnC Property="t15" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Decimal?>> t16)
                {
                    <PropertyColumnC Property="t16" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Double>> t17)
                {
                    <PropertyColumnC Property="t17" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Double?>> t18)
                {
                    <PropertyColumnC Property="t18" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Single>> t19)
                {
                    <PropertyColumnC Property="t19" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Single?>> t20)
                {
                    <PropertyColumnC Property="t20" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int32>> t21)
                {
                    <PropertyColumnC Property="t21" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int32?>> t22)
                {
                    <PropertyColumnC Property="t22" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, UInt32>> t23)
                {
                    <PropertyColumnC Property="t23" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, UInt32?>> t24)
                {
                    <PropertyColumnC Property="t24" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int64>> t25)
                {
                    <PropertyColumnC Property="t25" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int64?>> t26)
                {
                    <PropertyColumnC Property="t26" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, UInt64>> t27)
                {
                    <PropertyColumnC Property="t27" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, UInt64?>> t28)
                {
                    <PropertyColumnC Property="t28" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int16>> t29)
                {
                    <PropertyColumnC Property="t29" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, Int16?>> t30)
                {
                    <PropertyColumnC Property="t30" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateTime>> t31)
                {
                    <PropertyColumnC Property="t31" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateTime?>> t32)
                {
                    <PropertyColumnC Property="t32" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateTimeOffset>> t33)
                {
                    <PropertyColumnC Property="t33" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateTimeOffset?>> t34)
                {
                    <PropertyColumnC Property="t34" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, TimeSpan>> t35)
                {
                    <PropertyColumnC Property="t35" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, TimeSpan?>> t36)
                {
                    <PropertyColumnC Property="t36" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateOnly>> t37)
                {
                    <PropertyColumnC Property="t37" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, DateOnly?>> t38)
                {
                    <PropertyColumnC Property="t38" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, TimeOnly>> t39)
                {
                    <PropertyColumnC Property="t39" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else if (expression is Expression<Func<MyAllType, TimeOnly?>> t40)
                {
                    <PropertyColumnC Property="t40" IsSortable="true" HasAdvancedFilterOptions="true" />
                }
                else
                {
                    throw new Exception();
                }
            }

        }
    </QuickGridC>
    );
    }

}